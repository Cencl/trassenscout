// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique
  hashedPassword String?
  role           UserRoleEnum @default(USER)
  firstName      String?
  lastName       String?
  phone          String?

  tokens      Token[]
  sessions    Session[]
  projects    Project[]
  sections    Section[]
  subsections Subsection[]
}

enum UserRoleEnum {
  USER
  ADMIN
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @unique
  name        String
  shortName   String?
  description String?

  manager   User @relation(fields: [managerId], references: [id])
  managerId Int

  sections        Section[]
  calendarEntries CalendarEntry[]
  contacts        Contact[]
}

model CalendarEntry {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  startAt      DateTime
  locationName String?
  locationUrl  String?
  description  String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String
  title     String?
  phone     String?
  role      String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  @@unique([projectId, email])
}

model Section {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String
  name        String
  description String?

  manager   User    @relation(fields: [managerId], references: [id])
  managerId Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  subsections Subsection[]

  @@unique([projectId, slug])
}

model Subsection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String
  name        String
  description String?
  geometry    String

  manager   User    @relation(fields: [managerId], references: [id])
  managerId Int
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId Int

  @@unique([sectionId, slug])
}
